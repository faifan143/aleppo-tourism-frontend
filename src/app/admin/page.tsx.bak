/* eslint-disable @next/next/no-img-element */
// components/admin/AdminPanel.tsx
"use client";

import { PlaceModal } from "@/components/common/MapModal";
import FloatingElements from "@/components/ui/FloatingElements";
import PageSpinner from "@/components/ui/PageSpinner";
import { usePlaces } from "@/hooks/useCustomQuery";
import { tourismApi } from "@/utils/axios";
import { yupResolver } from "@hookform/resolvers/yup";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { AnimatePresence, motion } from "framer-motion";
import {
  ChevronLeft,
  ChevronRight,
  Loader2,
  Pencil,
  Plus,
  Search,
  Trash2,
  Upload,
} from "lucide-react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-hot-toast";
import * as yup from "yup";
import { useRouter } from "next/navigation";
import Cookies from "js-cookie";

type FormInputs = yup.InferType<typeof schema>;
const containerVariants = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  show: { opacity: 1, y: 0 },
};

const filterVariants = {
  hidden: { opacity: 0, x: -20 },
  show: { opacity: 1, x: 0 },
};
interface TourismPlace {
  id: number;
  name: string;
  description: string;
  category: string;
  expectedPeakTime: string;
  visitTimeRange?: string;
  latitude: number;
  longitude: number;
  coverImage: string;
  photos: { id: number; url: string }[];
  createdAt: string;
  updatedAt: string;
  adminId: number;
}

const schema = yup.object({
  name: yup.string().required("الاسم مطلوب"),
  description: yup.string().required("الوصف مطلوب"),
  latitude: yup
    .number()
    .required("خط العرض مطلوب")
    .min(-90, "خط العرض يجب أن يكون بين -90 و 90")
    .max(90, "خط العرض يجب أن يكون بين -90 و 90"),
  longitude: yup
    .number()
    .required("خط الطول مطلوب")
    .min(-180, "خط الطول يجب أن يكون بين -180 و 180")
    .max(180, "خط الطول يجب أن يكون بين -180 و 180"),
  coverImage: yup
    .mixed()
    .test("fileRequired", "الصورة الرئيسية مطلوبة", (value) =>
      value instanceof FileList ? value.length > 0 : value instanceof File
    ),
});

export default function AdminPanel() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalType, setModalType] = useState<"add" | "edit">("add");
  const [selectedPlace, setSelectedPlace] = useState<TourismPlace | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [filters, setFilters] = useState({
    sortBy: "newest",
    minPhotos: 0,
    dateRange: "all",
  });

  const router = useRouter();

  // Check admin authentication
  useEffect(() => {
    const adminToken = Cookies.get("admin_token");
    if (!adminToken) {
      router.push("/admin-login");
    }
  }, [router]);

  const itemsPerPage = 6;
  const queryClient = useQueryClient();

  // Form setup
  const { reset, setValue } = useForm({
    resolver: yupResolver(schema),
  });

  // Data fetching
  const { data: places = [], isLoading } = usePlaces();

  // Filter places
  const filteredPlaces = places
    .filter(
      (place) =>
        place.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        place.description.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((place) => place.photos.length >= filters.minPhotos)
    .filter((place) => {
      const date = new Date(place.createdAt);
      const now = new Date();
      switch (filters.dateRange) {
        case "week":
          return date >= new Date(now.setDate(now.getDate() - 7));
        case "month":
          return date >= new Date(now.setMonth(now.getMonth() - 1));
        case "year":
          return date >= new Date(now.setFullYear(now.getFullYear() - 1));
        default:
          return true;
      }
    })
    .sort((a, b) => {
      if (filters.sortBy === "newest") {
        return (
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
      }
      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
    });

  const totalPages = Math.ceil(filteredPlaces.length / itemsPerPage);
  const currentPlaces = filteredPlaces.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  // Reset current page when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, filters]);

  // Mutations
  const createPlaceMutation = useMutation({
    mutationFn: (formData: FormData) => tourismApi.create(formData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["places"] });
      queryClient.refetchQueries({ queryKey: ["places"] });
      setIsModalOpen(false);
      reset();
      toast.success("تم إنشاء المكان بنجاح");
    },
    onError: () => toast.error("فشل في إنشاء المكان"),
  });

  const updatePlaceMutation = useMutation({
    mutationFn: (data: { id: number; formData: FormData }) =>
      tourismApi.update(data.id, data.formData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["places"] });
      queryClient.refetchQueries({ queryKey: ["places"] });
      setIsModalOpen(false);
      toast.success("تم تحديث المكان بنجاح");
    },
    onError: () => toast.error("فشل في تحديث المكان"),
  });

  const deletePlaceMutation = useMutation({
    mutationFn: tourismApi.delete,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["places"] });
      queryClient.refetchQueries({ queryKey: ["places"] });
      toast.success("تم حذف المكان بنجاح");
    },
    onError: () => toast.error("فشل في حذف المكان"),
  });

  const addPhotosMutation = useMutation({
    mutationFn: (data: { id: number; formData: FormData }) =>
      tourismApi.addPhotos(data.id, data.formData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["places"] });
      queryClient.refetchQueries({ queryKey: ["places"] });
      toast.success("تم إضافة الصور بنجاح");
    },
    onError: () => toast.error("فشل في إضافة الصور"),
  });

  const handlePhotoUpload = (placeId: number) => {
    const input = document.createElement("input");
    input.type = "file";
    input.multiple = true;
    input.accept = "image/*";

    input.onchange = (e) => {
      if (e.target instanceof HTMLInputElement && e.target.files) {
        const formData = new FormData();
        Array.from(e.target.files).forEach((file) => {
          formData.append("photos", file);
        });
        addPhotosMutation.mutate({ id: placeId, formData });
      }
    };

    input.click();
  };

  const handleDelete = (id: number) => {
    if (confirm("هل أنت متأكد أنك تريد حذف هذا المكان؟")) {
      deletePlaceMutation.mutate(id);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-8"
      dir="rtl"
    >
      <FloatingElements />
      <div className="max-w-7xl mx-auto">
        {addPhotosMutation.isPending && deletePlaceMutation.isPending && (
          <PageSpinner />
        )}
        {/* Header */}
        <motion.div
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="flex justify-between items-center mb-8 bg-white p-6 rounded-2xl shadow-lg"
        >
          <motion.h1
            animate={{ scale: [1, 1.02, 1] }}
            transition={{ duration: 2, repeat: Infinity }}
            className="text-3xl p-2 font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-transparent bg-clip-text"
          >
            إدارة الأماكن السياحية
          </motion.h1>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => {
              setModalType("add");
              reset();
              setIsModalOpen(true);
            }}
            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white rounded-xl hover:shadow-lg transition-all duration-200"
          >
            <Plus className="w-5 h-5" />
            إضافة مكان جديد
          </motion.button>
        </motion.div>

        {/* Tabs */}
        <div className="mb-6 flex items-center justify-center gap-4">
          <button
            onClick={() => setActiveTab("places")}
            className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${activeTab === "places"
              ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-md"
              : "bg-white hover:bg-gray-50"
              }`}
          >
            الأماكن السياحية
          </button>
          <button
            onClick={() => setActiveTab("events")}
            className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${activeTab === "events"
              ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-md"
              : "bg-white hover:bg-gray-50"
              }`}
          >
            الفعاليات
          </button>
        </div>

        {/* Search & Filters */}
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="show"
          className="mb-8 bg-white p-6 rounded-2xl shadow-lg space-y-4"
        >
          <div className="flex gap-4 flex-wrap">
            <motion.div
              variants={filterVariants}
              className="flex-1 min-w-[300px]"
            >
              <div className="relative">
                <Search className="absolute right-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="البحث عن الأماكن..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pr-12 pl-4 py-3 rounded-xl border-2 border-gray-100 focus:border-purple-400 focus:ring focus:ring-purple-200 transition-all duration-200"
                />
              </div>
            </motion.div>

            {/* Filter selects with animation */}
            <motion.select
              variants={filterVariants}
              value={filters.sortBy}
              onChange={(e) =>
                setFilters((f) => ({ ...f, sortBy: e.target.value }))
              }
              className="rounded-xl border-2 border-gray-100 px-6 py-3 focus:border-purple-400 focus:ring focus:ring-purple-200 transition-all duration-200"
            >
              <option value="newest">الأحدث</option>
              <option value="oldest">الأقدم</option>
            </motion.select>

            <motion.select
              variants={filterVariants}
              value={filters.dateRange}
              onChange={(e) =>
                setFilters((f) => ({ ...f, dateRange: e.target.value }))
              }
              className="rounded-xl border-2 border-gray-100 px-6 py-3 focus:border-purple-400 focus:ring focus:ring-purple-200 transition-all duration-200"
            >
              <option value="all">كل الوقت</option>
              <option value="week">آخر أسبوع</option>
              <option value="month">آخر شهر</option>
              <option value="year">آخر سنة</option>
            </motion.select>
          </div>
        </motion.div>

        {/* Places Grid */}
        {isLoading ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex justify-center py-12"
          >
            <Loader2 className="w-8 h-8 animate-spin text-purple-600" />
          </motion.div>
        ) : (
          <AnimatePresence mode="wait">
            <motion.div
              key={searchTerm + filters.sortBy + filters.dateRange}
              variants={containerVariants}
              initial="hidden"
              animate="show"
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            >
              {currentPlaces.map((place, index) => (
                <motion.div
                  layout
                  key={index}
                  variants={itemVariants}
                  whileHover={{ y: -8 }}
                  className="group bg-white rounded-2xl shadow-lg overflow-hidden transition-all duration-200 hover:shadow-xl"
                >
                  <div className="relative h-48">
                    <motion.img
                      whileHover={{ scale: 1.1 }}
                      transition={{ duration: 0.3 }}
                      src={place.coverImage}
                      alt={place.name}
                      className="w-full h-full object-cover"
                    />
                    <motion.div
                      initial={{ opacity: 0 }}
                      whileHover={{ opacity: 1 }}
                      className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent transition-opacity duration-200"
                    />
                  </div>
                  <div className="p-6">
                    <motion.h3
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      className="text-xl font-bold mb-2 bg-gradient-to-r from-blue-600 to-purple-600 text-transparent bg-clip-text"
                    >
                      {place.name}
                    </motion.h3>
                    <p className="text-gray-600 mb-4 line-clamp-2">
                      {place.description}
                    </p>
                    <div className="flex justify-between items-center">
                      <div className="flex gap-2">
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handlePhotoUpload(place.id)}
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                        >
                          <Upload className="w-5 h-5" />
                        </motion.button>
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => {
                            setSelectedPlace(place);
                            setModalType("edit");
                            Object.keys(place).forEach((key) =>
                              setValue(
                                key as keyof FormInputs,
                                place[key as keyof TourismPlace]
                              )
                            );
                            setIsModalOpen(true);
                          }}
                          className="p-2 text-emerald-600 hover:bg-emerald-50 rounded-lg transition-colors"
                        >
                          <Pencil className="w-5 h-5" />
                        </motion.button>
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleDelete(place.id)}
                          className="p-2 text-rose-600 hover:bg-rose-50 rounded-lg transition-colors"
                        >
                          <Trash2 className="w-5 h-5" />
                        </motion.button>
                      </div>
                      <motion.span
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="px-4 py-1 bg-purple-100 text-purple-600 rounded-full text-sm font-medium"
                      >
                        {place.photos.length} صور
                      </motion.span>
                    </div>
                  </div>
                </motion.div>
              ))}
            </motion.div>

            {/* Pagination */}
            {totalPages > 1 && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="mt-8 flex justify-center gap-2"
              >
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setCurrentPage((p) => Math.max(1, p - 1))}
                  disabled={currentPage === 1}
                  className="p-3 rounded-xl bg-white border-2 disabled:opacity-50 hover:border-purple-400 transition-all duration-200"
                >
                  <ChevronRight className="h-5 w-5" />
                </motion.button>

                <div className="flex gap-2">
                  {[...Array(totalPages)].map((_, i) => (
                    <motion.button
                      key={i}
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onClick={() => setCurrentPage(i + 1)}
                      className={`w-12 h-12 rounded-xl font-medium transition-all duration-200 ${currentPage === i + 1
                        ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg"
                        : "bg-white border-2 hover:border-purple-400"
                        }`}
                    >
                      {i + 1}
                    </motion.button>
                  ))}
                </div>

                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() =>
                    setCurrentPage((p) => Math.min(totalPages, p + 1))
                  }
                  disabled={currentPage === totalPages}
                  className="p-3 rounded-xl bg-white border-2 disabled:opacity-50 hover:border-purple-400 transition-all duration-200"
                >
                  <ChevronLeft className="h-5 w-5" />
                </motion.button>
              </motion.div>
            )}
          </AnimatePresence>
        )}
      </AnimatePresence>
          )}

      <PlaceModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        type={modalType}
        initialData={
          selectedPlace
            ? {
              name: selectedPlace.name,
              description: selectedPlace.description,
              latitude: selectedPlace.latitude,
              longitude: selectedPlace.longitude,
              coverImage: selectedPlace.coverImage,
            }
            : undefined
        }
        onSubmit={async (formData) => {
          console.log("form data : 0 ", formData);

          if (modalType === "add") {
            await createPlaceMutation.mutateAsync(formData);
          } else if (selectedPlace) {
            await updatePlaceMutation.mutateAsync({
              id: selectedPlace.id,
              formData,
            });
          }
        }}
        isLoading={
          createPlaceMutation.isPending || updatePlaceMutation.isPending
        }
      />
    </div>
    </motion.div >
  );
}
